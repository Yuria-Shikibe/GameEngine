const auto& tex = atlas.getContextPage()->findPackData("pester-full")->textureRegion;

		const GL::Texture2D bottomLeftTex{ Assets::textureDir.subFile("ui").find("bottom-left.png") };
		const GL::Texture2D texture{ Assets::textureDir.find("yyz.png") };

		GL::MultiSampleFrameBuffer multiSample{ Core::renderer->getWidth(), Core::renderer->getHeight() };
		GL::FrameBuffer frameBuffer{ Core::renderer->getWidth(), Core::renderer->getHeight() };

		GL::TextureNineRegion uiTest{&bottomLeftTex, {0, 0, 256, 256}, {64, 64, 32, 64}};

		Core::renderer->registerSynchronizedResizableObject(&multiSample);
		Core::renderer->registerSynchronizedResizableObject(&frameBuffer);

		auto&& file = Assets::assetsDir.subFile("test.txt");
		const auto coordCenter = std::make_shared<Font::GlyphLayout>();
		const auto layout = std::make_shared<Font::GlyphLayout>();
		layout->maxWidth = 720;

		Font::glyphParser->parse(layout.get(), file.readString());
		layout->setAlign(Font::TypeSettingAlign::bottom_left);
		layout->move(80, 30);

		Event::generalUpdateEvents.on<Event::Draw_Post>([&]([[maybe_unused]] const Event::Draw_Post& d){
				const auto center = Core::camera->screenCenter();

				Draw::meshBegin(Core::batch->getMesh());

				Draw::setLineStroke(3);
				Draw::color(Colors::WHITE);

				Draw::lineAngleCenter(center.getX(), center.getY(), 135.0f, 50.0f);

				Draw::lineAngleCenter(center.getX(), center.getY(), 45, 50);

				Draw::flush();

				Draw::meshEnd(Core::batch->getMesh(), false);

			// Draw::meshBegin(Assets::Meshes::coords);
			// Draw::meshEnd(true);
			//
			// if(bloomTest)Core::renderer->frameBegin(&frameBuffer);
			// Core::renderer->frameBegin(&multiSample);
			//
			// const auto center = Core::camera->screenCenter();
			//
			// Draw::meshBegin(Core::batch->getMesh());
			//
			// Draw::setLineStroke(3);
			// Draw::color(Colors::WHITE);
			//
			// Draw::lineAngleCenter(center.getX(), center.getY(), 135.0f, 50.0f);
			//
			// Draw::lineAngleCenter(center.getX(), center.getY(), 45, 50);
			//
			// Draw::color();
			//
			// if(atlas.getContextPage()->finished()) {
			// 	const auto texTest = atlas.find("test-pester-full");
			//
			// 	Draw::rect(texTest, 200, 500, -45);
			// }else {
			//
			// 	Draw::setLineStroke(10);
			// 	Draw::color(Colors::GRAY);
			// 	Draw::lineAngleCenter(100, 100, 0, 800);
			// 	Draw::color(Colors::SKY);
			// 	Draw::lineAngleCenter(100, 100, 0, 800 * atlas.getContextPage()->getProgress());
			// }
			//
			// layout->render();
			//
			// std::stringstream ss{};
			//
			// Geom::Matrix3D mat{};
			// mat.setOrthogonal(0.0f, 0.0f, static_cast<float>(Core::renderer->getWidth()), static_cast<float>(Core::renderer->getHeight()));
			//
			// Core::batch->beginProjection(mat);
			//
			// uiTest.render_RelativeExter(100, 100, 500, 800);
			//
			// Core::batch->endProjection();
			//
			//
			// ss << "${font#tele}${scl#[0.52]}(" << std::fixed << std::setprecision(2) << center.getX() << ", " << center.getY() << " | " << std::to_string(OS::getFPS()) << ")";
			//
			// Font::glyphParser->parse(coordCenter.get(), ss.str());
			//
			// coordCenter->offset.set(center).add(155, 35);
			//
			// coordCenter->setAlign(Font::TypeSettingAlign::bottom_left);
			// coordCenter->render();
			//
			// Draw::rect_line(layout->bound, true, layout->offset);
			//
			// Draw::setLineStroke(3);
			// Draw::color(Colors::BLUE, Colors::SKY, 0.745f);
			//
			// Draw::setLineStroke(5);
			// Draw::poly(center.getX(), center.getY(), 64, 160, 0, Math::clamp(fmod(OS::globalTime() / 5.0f, 1.0f)),
			// 	{ Colors::SKY, Colors::ROYAL, Colors::SKY, Colors::WHITE, Colors::ROYAL, Colors::SKY }
			// );
			//
			// Draw::flush();
			// Draw::meshEnd(Core::batch->getMesh(), false);
			// Core::renderer->frameEnd(Assets::PostProcessors::blendMulti);
			// if(bloomTest)Core::renderer->frameEnd(Assets::PostProcessors::bloom);
		});